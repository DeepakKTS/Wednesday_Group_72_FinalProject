/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import Model.Apartmentlistings;
import Model.Broker;
import Model.Market;
import Model.Requeststudent;
import Model.SQLconnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import Model.Markethistory;
import Model.Market;
import java.sql.Statement;
import javax.swing.JOptionPane;

/**
 *
 * @author deepakzedler
 */
public class MarketplaceAddproducts extends javax.swing.JPanel {

    /**
     * Creates new form MarketplaceAddproducts
     */
   
    
    Markethistory mh= new Markethistory();
    Market mp;
    public MarketplaceAddproducts() {
        initComponents();
        this.setSize(1024, 768);
        mh.getMarketHistory();
        this.mp = mp;
        PopulateTable();
           
          
            
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblmarketplace = new javax.swing.JTable();
        btndelete = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setBackground(new java.awt.Color(0, 153, 153));
        setFocusTraversalPolicyProvider(true);
        setName(""); // NOI18N
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblmarketplace.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Product Name", "Price", "Used / Unused"
            }
        ));
        jScrollPane1.setViewportView(tblmarketplace);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 90, 496, 203));

        btndelete.setFont(new java.awt.Font("Big Caslon", 1, 14)); // NOI18N
        btndelete.setText("REMOVE");
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });
        add(btndelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 340, -1, -1));

        btnAdd.setFont(new java.awt.Font("Big Caslon", 1, 14)); // NOI18N
        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 340, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Project Images/gradient (1).jpeg"))); // NOI18N
        jLabel2.setText("jLabel2");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed
       // Handle product deletion using prepopulated data
    int selectedRowIndex = tblmarketplace.getSelectedRow();

    try {
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a valid row to delete!");
            return;
        }

        // Access the table model
        DefaultTableModel model = (DefaultTableModel) tblmarketplace.getModel();

        // Fetch the selected market object using the row index
        String productName = model.getValueAt(selectedRowIndex, 0).toString(); // Get the Name column value
        double productPrice = Double.parseDouble(model.getValueAt(selectedRowIndex, 1).toString()); // Get the Price column value

        // Remove the product from the MySQL database
        try (Connection con = SQLconnection.dbconnector()) {
            String sql = "DELETE FROM Product WHERE Name = ? AND Price = ?";
            PreparedStatement stmt = con.prepareStatement(sql);
            stmt.setString(1, productName);
            stmt.setDouble(2, productPrice);
            int rowsAffected = stmt.executeUpdate();

            if (rowsAffected > 0) {
                // Remove the selected market object from the list
                Market mp = mh.getList().get(selectedRowIndex);
                mh.deleteMarket(mp);

                // Refresh the table after deletion
                PopulateTable();

                // Notify the user about successful deletion
                JOptionPane.showMessageDialog(this, "Product deleted successfully!");
            } else {
                JOptionPane.showMessageDialog(this, "Failed to delete the product from the database.");
            }
        }

    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "An error occurred while deleting the product: " + ex.getMessage());
    }
    }//GEN-LAST:event_btndeleteActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        // Handle adding a new product
    try {
        // Collect data from the user via input dialogs
        String name = JOptionPane.showInputDialog(this, "Enter Product Name:");
        if (name == null || name.isBlank()) {
            JOptionPane.showMessageDialog(this, "Product Name cannot be empty!");
            return;
        }

        String priceInput = JOptionPane.showInputDialog(this, "Enter Product Price:");
        if (priceInput == null || priceInput.isBlank()) {
            JOptionPane.showMessageDialog(this, "Product Price cannot be empty!");
            return;
        }
        double price;
        try {
            price = Double.parseDouble(priceInput);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid Price! Please enter a numeric value.");
            return;
        }

        String[] usedOptions = {"Used", "Unused"};
        String used = (String) JOptionPane.showInputDialog(
                this,
                "Select Product Status:",
                "Product Status",
                JOptionPane.QUESTION_MESSAGE,
                null,
                usedOptions,
                usedOptions[0]
        );
        if (used == null) {
            JOptionPane.showMessageDialog(this, "Product Status is required!");
            return;
        }

        String image = JOptionPane.showInputDialog(this, "Enter Image Path or URL:");
        if (image == null || image.isBlank()) {
            image = "No Image";
        }

        // Generate a unique ProductID
        int productID = mh.getList().size() + 1;

        // Create a new Market object
        Market newProduct = new Market(name, price, used, image);

        // Add the new product to the Markethistory list
        mh.addNewMarket();

        // Insert the product into the MySQL database
        try (Connection con = SQLconnection.dbconnector()) {
            String sql = "INSERT INTO Product (ProductID, Name, Price, `Used/Unused`, Images) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement stmt = con.prepareStatement(sql);
            stmt.setInt(1, productID);
            stmt.setString(2, name);
            stmt.setDouble(3, price);
            stmt.setString(4, used);
            stmt.setString(5, image);
            stmt.executeUpdate();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database Error: " + ex.getMessage());
            return;
        }

        // Refresh the UI Table
        PopulateTable();

        // Notify the user about successful addition
        JOptionPane.showMessageDialog(this, "Product added successfully!");

    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "An error occurred while adding the product: " + ex.getMessage());
    }
    }//GEN-LAST:event_btnAddActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btndelete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblmarketplace;
    // End of variables declaration//GEN-END:variables
private void PopulateTable() {
    DefaultTableModel model = (DefaultTableModel) tblmarketplace.getModel();
    model.setRowCount(0);

    try (Connection con = SQLconnection.dbconnector()) {
        String sql = "SELECT * FROM Product";
        PreparedStatement stmt = con.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();

        while (rs.next()) {
            Object[] row = new Object[4];
            row[0] = rs.getString("Name");
            row[1] = rs.getDouble("Price");
            row[2] = rs.getString("Used/Unused");
            row[3] = rs.getString("Images");
            model.addRow(row);
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error fetching data from database: " + ex.getMessage());
    }
}}
